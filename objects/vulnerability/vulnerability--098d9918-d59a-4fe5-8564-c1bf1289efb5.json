{
    "type": "bundle",
    "id": "bundle--f3c7dd0d-2bb1-430c-91ef-44d9e1f8f077",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--098d9918-d59a-4fe5-8564-c1bf1289efb5",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-12-12T01:53:40.315523Z",
            "modified": "2024-12-12T01:53:40.315523Z",
            "name": "CVE-2024-47834",
            "description": "GStreamer is a library for constructing graphs of media-handling components. An Use-After-Free read vulnerability has been discovered affecting the processing of CodecPrivate elements in Matroska streams. In the GST_MATROSKA_ID_CODECPRIVATE case within the gst_matroska_demux_parse_stream function, a data chunk is allocated using gst_ebml_read_binary. Later, the allocated memory is freed in the gst_matroska_track_free function, by the call to g_free (track->codec_priv). Finally, the freed memory is accessed in the caps_serialize function through gst_value_serialize_buffer. The freed memory will be accessed in the gst_value_serialize_buffer function. This results in a UAF read vulnerability, as the function tries to process memory that has already been freed. This vulnerability is fixed in 1.24.10.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-47834"
                }
            ]
        }
    ]
}