{
    "type": "bundle",
    "id": "bundle--ec703230-f5d0-4b0c-a6a2-cc5b7b99d031",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--d6a718e5-22ad-4151-a0a1-16df272c1795",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-10-22T01:45:27.206969Z",
            "modified": "2024-10-22T01:45:27.206969Z",
            "name": "CVE-2024-49976",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ntracing/timerlat: Drop interface_lock in stop_kthread()\n\nstop_kthread() is the offline callback for \"trace/osnoise:online\", since\ncommit 5bfbcd1ee57b (\"tracing/timerlat: Add interface_lock around clearing\nof kthread in stop_kthread()\"), the following ABBA deadlock scenario is\nintroduced:\n\nT1                            | T2 [BP]               | T3 [AP]\nosnoise_hotplug_workfn()      | work_for_cpu_fn()     | cpuhp_thread_fun()\n                              |   _cpu_down()         |   osnoise_cpu_die()\n  mutex_lock(&interface_lock) |                       |     stop_kthread()\n                              |     cpus_write_lock() |       mutex_lock(&interface_lock)\n  cpus_read_lock()            |     cpuhp_kick_ap()   |\n\nAs the interface_lock here in just for protecting the \"kthread\" field of\nthe osn_var, use xchg() instead to fix this issue. Also use\nfor_each_online_cpu() back in stop_per_cpu_kthreads() as it can take\ncpu_read_lock() again.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-49976"
                }
            ]
        }
    ]
}