{
    "type": "bundle",
    "id": "bundle--1ab26664-a5b0-44cb-a4ab-4090195276ce",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--3f82ac61-13bf-4235-bdfa-f4394efae49a",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-05-20T00:18:29.277557Z",
            "modified": "2024-05-20T00:18:29.277557Z",
            "name": "CVE-2024-35905",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf: Protect against int overflow for stack access size\n\nThis patch re-introduces protection against the size of access to stack\nmemory being negative; the access size can appear negative as a result\nof overflowing its signed int representation. This should not actually\nhappen, as there are other protections along the way, but we should\nprotect against it anyway. One code path was missing such protections\n(fixed in the previous patch in the series), causing out-of-bounds array\naccesses in check_stack_range_initialized(). This patch causes the\nverification of a program with such a non-sensical access size to fail.\n\nThis check used to exist in a more indirect way, but was inadvertendly\nremoved in a833a17aeac7.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-35905"
                }
            ]
        }
    ]
}