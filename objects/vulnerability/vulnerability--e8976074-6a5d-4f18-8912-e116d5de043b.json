{
    "type": "bundle",
    "id": "bundle--7c815b2c-a125-43f1-becb-40da4c43ed7f",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--e8976074-6a5d-4f18-8912-e116d5de043b",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-06-20T00:17:19.113354Z",
            "modified": "2024-06-20T00:17:19.113354Z",
            "name": "CVE-2021-47577",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nio-wq: check for wq exit after adding new worker task_work\n\nWe check IO_WQ_BIT_EXIT before attempting to create a new worker, and\nwq exit cancels pending work if we have any. But it's possible to have\na race between the two, where creation checks exit finding it not set,\nbut we're in the process of exiting. The exit side will cancel pending\ncreation task_work, but there's a gap where we add task_work after we've\ncanceled existing creations at exit time.\n\nFix this by checking the EXIT bit post adding the creation task_work.\nIf it's set, run the same cancelation that exit does.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2021-47577"
                }
            ]
        }
    ]
}